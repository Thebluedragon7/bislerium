@using Plugins.DataStore.SQL.constants
@model CoreBusiness.Blog
@inject Microsoft.AspNetCore.Identity.UserManager<CoreBusiness.User> UserManager

@{
    ViewBag.Title = "Blog Detail";
}

<div class="container">
    <div>
        <div>
            <div class="d-flex justify-content-between align-items-xl-center">
                <h1>@Model.Title</h1>

                @if (User?.Identity != null && User.Identity.IsAuthenticated && UserManager.GetUserId(User) == Model.AuthorId)
                {
                    <div>
                        <a class="btn btn-warning" role="button" asp-controller="Blogs" asp-action="Edit" asp-route-id="@Model.Id">
                            Edit
                        </a>
                        <a class="btn btn-danger ms-3" role="button" asp-controller="Blogs" asp-action="Delete" asp-route-id="@Model.Id">
                            Delete
                        </a>
                    </div>
                }

            </div>
            <div class="d-flex justify-content-between align-items-xl-center">
                <h5 class="text-muted">@Model.Subtitle</h5><em>by @Model.Author.FullName</em>
            </div>
        </div>
        <p style="text-align: justify;">@Model.Body</p>

        @if (Model.BlogImages != null && Model.BlogImages.Count > 0)
        {
            <div class="row gy-4 row-cols-1 row-cols-md-2">
                @foreach (var image in Model.BlogImages)
                {
                    <div class="col">
                        <div class="d-flex flex-column flex-lg-row">
                            <div class="w-100">
                                <img class="rounded img-fluid d-block w-100 fit-cover" style="" src="@image.ImageUrl" alt="img"/>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

        <hr/>
        <div class="d-xl-flex align-items-xl-center">
            <form method="post" asp-controller="BlogReactions" asp-action="CreateUpvote">
                <input type="hidden" name="blogId" value="@Model.Id"/>
                <button class="btn btn-success" type="submit">
                    Upvote (@(Model.BlogReactions?.Where(r => r.ReactionTypeId == Guid.Parse(ReactionTypeMapper.UPVOTE)).Count() ?? 0))
                </button>
            </form>
            <form method="post" asp-controller="BlogReactions" asp-action="CreateDownvote">
                <input type="hidden" name="blogId" value="@Model.Id"/>
                <button class="btn btn-warning ms-3" type="submit">
                    Downvote (@(Model.BlogReactions?.Where(r => r.ReactionTypeId == Guid.Parse(ReactionTypeMapper.DOWNVOTE)).Count() ?? 0))
                </button>
            </form>
            <a class="btn btn-primary ms-3" role="button" asp-controller="Comments" asp-action="Create" asp-route-blogId="@Model.Id">
                Comment (@(Model.Comments?.Count ?? 0))
            </a>
        </div>
    </div>
    <hr/>

    @if (Model.Comments != null && Model.Comments.Count > 0)
    {
        <h2>Comments</h2>
        <div class="mt-4">
            <h2></h2>
            <ul class="list-group">
                @foreach (var comment in Model.Comments)
                {
                    <li class="list-group-item">
                        <div class="d-flex justify-content-between">
                            <div>
                                <span>@comment.Text</span><em> - @comment.User.FullName</em>
                            </div>
                            <div class="d-xl-flex align-items-xl-center">
                                <form method="post" asp-controller="CommentReactions" asp-action="CreateUpvote">
                                    <input type="hidden" name="commentId" value="@comment.Id"/>
                                    <button class="btn btn-success" type="submit">
                                        Upvote (@(comment.CommentReactions?.Where(cr => cr.ReactionTypeId == Guid.Parse(ReactionTypeMapper.UPVOTE)).Count() ?? 0))
                                    </button>
                                </form>

                                <form method="post" asp-controller="CommentReactions" asp-action="CreateDownvote">
                                    <input type="hidden" name="commentId" value="@comment.Id"/>
                                    <button class="btn btn-warning ms-3" type="submit">
                                        Downvote (@(comment.CommentReactions?.Where(cr => cr.ReactionTypeId == Guid.Parse(ReactionTypeMapper.DOWNVOTE)).Count() ?? 0))
                                    </button>
                                </form>

                                @if (User?.Identity != null && User.Identity.IsAuthenticated && (UserManager.GetUserId(User) == comment.UserId || UserManager.GetUserId(User) == Model.AuthorId))
                                {
                                    <a class="btn btn-danger ms-3" role="button" asp-controller="Comments" asp-action="Delete" asp-route-id="@comment.Id">
                                        Delete
                                    </a>
                                }

                            </div>
                        </div>
                    </li>
                }

            </ul>
        </div>
    }
</div>